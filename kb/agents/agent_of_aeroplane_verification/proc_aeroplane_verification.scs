scp_program ->proc_aeroplane_verification
(*
    ->rrel_params: .proc_aeroplane_verification_params
    (*
        -> rrel_1: rrel_in: _parameter;;
        -> rrel_2: rrel_in: _answer;;
    *);;


    ->rrel_operators: .proc_aeroplane_verification_operator_set
    (*
        -> rrel_init: .proc_aeroplane_verification_operator1
        (*
            <- sys_search;;

            -> rrel_1: rrel_fixed: rrel_scp_const: 
            [*
                concept_aeroplane _-> _aeroplane;;

                _max_takeoff_weight _<- value;;
                _range _<- value;;
                _payload _<- value;;
                _speed _<- value;;

                _aeroplane _=> nrel_max_takeoff_weight:: _max_takeoff_weight;;
                _aeroplane _=> nrel_ferry_range:: _range;;
                _aeroplane _=> nrel_max_payload:: _payload;;
                _aeroplane _=> nrel_cruise_speed:: _speed;;
            *];;
            -> rrel_2: rrel_assign: rrel_scp_var: _elem_2_aeroplane_ver;;
            -> rrel_3: rrel_fixed: rrel_scp_const: ...
            (*
				-> ...
				(* 
					-> rrel_1: rrel_fixed: rrel_scp_const: _aeroplane;;
                	-> rrel_2: rrel_fixed: rrel_scp_var: _parameter;;
				*);;
			*);;

            => nrel_then: .proc_aeroplane_verification_operator_print_positive;;
            => nrel_else: .proc_aeroplane_verification_operator_print_negative;;
        *);;

        -> .proc_aeroplane_verification_operator_print_positive
        (*
            <- printNl;;

            -> rrel_1: rrel_fixed: rrel_scp_const: [Valid];;

            => nrel_goto: .proc_aeroplane_verification_operator_return;;
        *);;

        -> .proc_aeroplane_verification_operator_print_negative
        (*
            <- printNl;;

            -> rrel_1: rrel_fixed: rrel_scp_const: [Invalid];;

            => nrel_goto: .proc_aeroplane_verification_operator_return;;
        *);;
        
        -> .proc_aeroplane_verification_operator_return
        (*
            <- return;;
        *);;
    *);;
*);;
