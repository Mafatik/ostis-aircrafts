scp_program -> proc_aeroplane_verification
(*
    -> rrel_params: .proc_aeroplane_verification_params
    (*
        -> rrel_1: rrel_in: _parameter;; // класс
        -> rrel_2: rrel_in: _answer;;
    *);;

    -> rrel_operators: .proc_aeroplane_verification_operator_set
    (*
        // копируем все экземпляры во временное множество
        -> rrel_init: .proc_aeroplane_verification_operator_1_A
        (*
            <- searchSetStr3;;
        
            -> rrel_1: rrel_fixed: rrel_scp_var: _parameter;;
            -> rrel_2: rrel_assign: rrel_scp_var: rrel_const: rrel_pos_const_perm: _arc;;
            -> rrel_3: rrel_assign: rrel_scp_var: rrel_const: rrel_node: _instance;;
            -> rrel_set_3: rrel_assign: rrel_scp_var: _all_instances;;
            
            => nrel_then: .proc_aeroplane_verification_operator_1_B;;
            => nrel_else: .proc_aeroplane_verification_operator_print_no_instance;;
        *);;

        // перебор каждого экземпляра во временном множестве
        -> .proc_aeroplane_verification_operator_1_B
        (*
            <- searchElStr3;;

            -> rrel_1: rrel_fixed: rrel_scp_var: _all_instances;;
            -> rrel_2: rrel_assign: rrel_scp_var: rrel_const: rrel_pos_const_perm: _instance_arc;;
            -> rrel_3: rrel_assign: rrel_scp_var: rrel_const: rrel_node: _instance;;

            => nrel_then: .proc_aeroplane_verification_operator_1_C;;
            => nrel_else: .proc_aeroplane_verification_operator_return;; // перебраны все экземпляры
        *);;

        // копируем все обязательные величины для класса во временное множество
        -> .proc_aeroplane_verification_operator_1_C
        (*
            <- searchSetStr5;;
        
            -> rrel_1: rrel_fixed: rrel_scp_var: _parameter;;
            -> rrel_2: rrel_assign: rrel_scp_var: rrel_const: rrel_common: _arc1;;
            -> rrel_3: rrel_assign: rrel_scp_var: rrel_const: rrel_norole_relation: _r_nrel;;
            -> rrel_4: rrel_assign: rrel_scp_var: rrel_const: rrel_pos_const_perm: _arc2;;
            -> rrel_5: rrel_fixed: rrel_scp_const: rrel_norole_relation: nrel_requered_characteristics;;
            -> rrel_set_3: rrel_assign: rrel_scp_var: _all_req_nrel;;
            
            => nrel_then: .proc_aeroplane_verification_operator_1_DA;;
            => nrel_else: .proc_aeroplane_verification_operator_print_no_req;;
        *);;

        // перебор каждой обязательной величины
        -> .proc_aeroplane_verification_operator_1_DA
        (*
             <- searchElStr3;;

            -> rrel_1: rrel_fixed: rrel_scp_var: _all_req_nrel;;
            -> rrel_2: rrel_assign: rrel_scp_var: rrel_const: rrel_pos_const_perm: _req_nrel_arc;;
            -> rrel_3: rrel_assign: rrel_scp_var: rrel_norole_relation: _req_nrel;;

            => nrel_then: .proc_aeroplane_verification_operator_1_EA;;
            => nrel_else: .proc_aeroplane_verification_operator_1_DB;; // все обязательные величины перебраны,
            // экземпляр валиден
        *);;

        // вывод на экран сообщения о том, что экземпляр валиден
        -> .proc_aeroplane_verification_operator_1_DB
        (*
            <- printNl;;

            -> rrel_1: rrel_fixed: rrel_scp_const: [Valid];;

            => nrel_goto: .proc_aeroplane_verification_operator_1_DC;;
        *);;

        // ищем дугу между классом и экземпляром
        -> .proc_aeroplane_verification_operator_1_DC
        (*
            <- searchElStr3;;

            -> rrel_1: rrel_fixed: rrel_scp_var: _parameter;;
            -> rrel_2: rrel_assign: rrel_scp_var: rrel_const: rrel_pos_const_perm: _class_arc;;
            -> rrel_3: rrel_fixed: rrel_scp_var: _instance;;

            => nrel_goto: .proc_aeroplane_verification_operator_1_DD;;
        *);;

        // помечаем экземпляр как валидный
        -> .proc_aeroplane_verification_operator_1_DD
        (*
            <- genElStr3;;

            -> rrel_1: rrel_fixed: rrel_scp_const: rrel_instance_with_all_requered_values;;
            -> rrel_2: rrel_assign: rrel_scp_var: rrel_const: rrel_pos_const_perm: _arc;;
            -> rrel_3: rrel_fixed: rrel_scp_var: _class_arc;;

            => nrel_goto: .proc_aeroplane_verification_operator_1_DE;;
        *);;

        // удаляем дугу между текущим экземпляром и временным множеством экземпляров
        -> .proc_aeroplane_verification_operator_1_DE
        (*
            <- eraseEl;;

            -> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _instance_arc;;

            => nrel_goto: .proc_aeroplane_verification_operator_1_B;; // новый экземпляр
        *);;

        // поиск элементов по шаблону
        -> .proc_aeroplane_verification_operator_1_EA
        (*
            <- sys_search;;

            -> rrel_1: rrel_fixed: rrel_scp_const:
            [*
                value _-> _some_value;;
                _some_value _<= _some_nrel:: _some_instance;;
            *];;
            -> rrel_2: rrel_fixed: rrel_scp_const: ...;;
            -> rrel_3: rrel_fixed: rrel_scp_const: ...
            (*
                -> ...
                (*
                    -> rrel_1: rrel_fixed: rrel_scp_const: _some_instance;;
                    -> rrel_2: rrel_fixed: rrel_scp_var: _instance;;
                *);;
                
                -> ...
                (*
                    -> rrel_1: rrel_fixed: rrel_scp_const: _some_nrel;;
                    -> rrel_2: rrel_fixed: rrel_scp_var: _req_nrel;;
                *);;
            *);;
            
            => nrel_then: .proc_aeroplane_verification_operator_1_EAA;;
            => nrel_else: .proc_aeroplane_verification_operator_1_EBA;;
        *);;

        // удаляем дугу между текущей величиной и временным множеством величин
        -> .proc_aeroplane_verification_operator_1_EAA
        (*
            <- eraseEl;;

            -> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _req_nrel_arc;;

            => nrel_goto: .proc_aeroplane_verification_operator_1_DA;; // следующая величина
        *);;

        // вывод на экран текущего экземпляра
        -> .proc_aeroplane_verification_operator_1_EBA
        (*
            <-printEl;;

            -> rrel_1: rrel_fixed: rrel_scp_var: _instance;;

            => nrel_goto: .proc_aeroplane_verification_operator_1_EBB;;
        *);;

        // вывод на экран сообщения о том, что экземпляр невалиден
        -> .proc_aeroplane_verification_operator_1_EBB
        (*
            <- printNl;;

            -> rrel_1: rrel_fixed: rrel_scp_const: [Invalid];;

            => nrel_goto: .proc_aeroplane_verification_operator_1_EBC;; 
        *);;

        // ищем дугу между классом и экземпляром
        -> .proc_aeroplane_verification_operator_1_EBC
        (*
            <- searchElStr3;;

            -> rrel_1: rrel_fixed: rrel_scp_var: _parameter;;
            -> rrel_2: rrel_assign: rrel_scp_var: rrel_const: rrel_pos_const_perm: _class_arc;;
            -> rrel_3: rrel_fixed: rrel_scp_var: _instance;;

            => nrel_goto: .proc_aeroplane_verification_operator_1_EBD;;
        *);;

        // помечаем экземпляр как невалидный
        -> .proc_aeroplane_verification_operator_1_EBD
        (*
            <- genElStr3;;

            -> rrel_1: rrel_fixed: rrel_scp_const: rrel_instance_with_all_requered_values;;
            -> rrel_2: rrel_assign: rrel_scp_var: rrel_const: rrel_pos_const_perm: rrel_neg: _arc;;
            -> rrel_3: rrel_fixed: rrel_scp_var: _class_arc;;

            => nrel_goto: .proc_aeroplane_verification_operator_1_DE;; 
        *);;

        // вывод сообщения о том, что у данного класса нет экземпляров
        -> .proc_aeroplane_verification_operator_print_no_instance
        (*
            <- printNl;;

            -> rrel_1: rrel_fixed: rrel_scp_const: [No instance of this class];;

            => nrel_goto: .proc_aeroplane_verification_operator_return;;
        *);;

        // вывод сообщения о том, что у данного класса нет обязательных величин
        -> .proc_aeroplane_verification_operator_print_no_req
        (*
            <- printNl;;

            -> rrel_1: rrel_fixed: rrel_scp_const: [No requered characteristics for this class];;

            => nrel_goto: .proc_aeroplane_verification_operator_return;;
        *);;
        
        // выход из процедуры
        -> .proc_aeroplane_verification_operator_return
        (*
            <- return;;
        *);;
    *);;
*);;
