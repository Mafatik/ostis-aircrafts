Данные правила предоставлены при условии использования VS Code.

1. Сначала продумать логику программы. В идеале нарисовать диаграмму программы
с пререходами по nrel_then/nrel_else/nrel_goto, т.к. логика агентных программ
бывает довольно ветвистой и запутанной. Диаграмма представлена в виде
опрераторов и стрелок перехода между ними.

2. Написать в листинг прогаммы все операторы БЕЗ параметров, но С условными
переходами. Посмотреть пункт 3. По мере написания операторов комментировать,
что они операторы (в идеале прокомментировать все операторы, это понадобится
дальше), прокомментировать условные преходы, если оператор после перехода в
листинге не идет сразу после данного. Сверить последовательность преходов.
Для этого два раза нажать по названию оператора, в листинге должно подсветиться
другие упоминания этого оператора. В итоге в листинге должны быть операторы
следующего вида:
    // проверка, входит ли элемент во множество
    -> .proc_aircraft_verification_operator_1_A
    (*
        -> searchElStr3;;

        => nrel_then: .proc_aircraft_verification_operator_1_B;;
        => nrel_else: .proc_aircraft_verification_operator_return;;
    *);;
    
3. Опреаторы подписывать по шаблону 
    название-процесса_operator_номер-логической-секции_кодировка-буквами
(например, proc_aircraft_verification_operator_1_EA). Логические блоки
выделяются по своему вкусу (например, блок 1 -- вызов одной процедурры и
действия с ее выводом, блок 2 -- вызов другой процедуры и действия с ее
выводом). Буквенная кодировка производится в алфавитном порядке и может
содержать несколько порядков (например, последовательность выполнений
операторов может быть AA -> AB -> AC-> ... или DA -> DC -> BD -> ...). Обратите
внимание на то, что нижняя черта есть между номером и буквенной кодировкой,
т.к. легко перепутать букву D и цифру 0, например. У опраторов выхода в конце
должно быть слово return (см пример в п. 2). Опраторы вывода содержимого ссылки
на экран можно подписывать по шаблону
    название-процесса_operator_print_что-печатает

4. Дописать все параметры к операторам. Все rrel прописывать в одинаковом
порядке для всех параметров. Например, в порядке 
    rrel_1: rrel_fixed/assig: rrel_scp_var/const: rrel_var/const: rrel_node/...

5. Все замены делать автоматически через глобальный поиск или кликнуть два раза
по названию и нажимать ctrl + D, выделяя нужные названия.

6. Лучше скопировать, чем написать от руки

7. Если программа не работает, заккоментировать все операторы и оставить только
несколько первых. Запустить, посмотеть на результаты работы агента. Если он
совпадает с ожиданиями, раскомментировать следующий (по порядку исполнения)
опреатор (или несколько), запустить, проверить. Так делать до тех пор, пока
результат работы будет не совпадать с ожиданиями. Поздравляю, вы нашли баг.

8. Если программа не работает, также можно вбить в поиск неверные конструкции,
которые часто печатаются случайно, например rel или rerl вмеcто rrel или than
вместо then.

9. Для верификации шаблона поиска в sys_search или sys_gen нужно сделать
оператор доступным для просмотра (убрать точку перед ним). Тогда в экспертном
режиме, перейдя rrel_1 этого операторв, можно посмотреть шаблон в SCg. Такой
способ помогает в поиске багов, связвнных с неправильным шаблоном.
